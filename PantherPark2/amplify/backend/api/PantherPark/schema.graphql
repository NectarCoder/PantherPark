type Address {
  Street: String!
  City: String!
  State: String!
  ZipCode: String!
}

type DateAndTime {
  DayNum: Int!
  Month: Int!
  Year: Int!
  Hour: Int!
  Minute: Int!
  IsAM: Boolean!
}

type Reservation @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}]) {
  id: ID!
  StartDateAndTime: DateAndTime
  EndDateAndTime: DateAndTime
  SpotID: ID! @index(name: "bySpot")
  Payment: Payment @hasOne
}

type Payment @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}]) {
  id: ID!
  CardID: ID! @index(name: "byCard")
}

type Card @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["User"], operations: [read]}, {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}]) {
  id: ID!
  CardNumber: String!
  CardVerificationValue: String!
  ExpDate: String!
  BillingName: String!
  PaymentCard: [Payment] @hasMany(indexName: "byCard", fields: ["id"])
}

type Sensor @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}]) {
  id: ID!
  ModelNumber: Int
  SerialNumber: Int
  Status: Int!
  Spot: Spot @hasOne
}

type Spot @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [read, create, update, delete]}]) {
  id: ID!
  Code: String!
  HandicapOnly: Boolean!
  ReservationStatus: Int
  DeckID: ID! @index(name: "byDeck")
  ReservedSpot: [Reservation] @hasMany(indexName: "bySpot", fields: ["id"])
}

type Deck @model @auth(rules: [{allow: groups, groups: ["Admins"], operations: [create, update, delete, read]}]) {
  id: ID!
  DeckName: String!
  Levels: Int!
  Latitude: String
  Longitude: String
  SpotCount: Int!
  Spots: [Spot] @hasMany(indexName: "byDeck", fields: ["id"])
  Address: Address!
  WhoIsAllowed: String!
}
 